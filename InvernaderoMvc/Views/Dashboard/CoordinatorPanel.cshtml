@{
    ViewData["Title"] = "Panel de Coordinador";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1 class="mb-4">ðŸ‘· Panel de Coordinador</h1>

<div class="row">
  <div class="col-md-6 mb-4">
    <div class="card shadow-sm">
      <div class="card-header bg-warning text-dark">Alertas</div>
      <ul class="list-group list-group-flush" id="alertList"></ul>
    </div>
  </div>
  <div class="col-md-6 mb-4">
    <div class="card shadow-sm">
      <div class="card-header bg-info text-white">Datos en Tiempo Real</div>
      <div class="card-body">
        <canvas id="liveChart"></canvas>
      </div>
    </div>
  </div>
</div>

<table class="table table-sm">
  <thead><tr><th>Temp</th><th>Hum</th><th>Nivel</th><th>pH</th><th>FechaHora</th></tr></thead>
  <tbody id="sensorBody"></tbody>
</table>

@section Scripts {
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
  const liveCtx = document.getElementById('liveChart').getContext('2d');
  const liveChart = new Chart(liveCtx, {
    type:'line',
    data:{ labels:[], datasets:[
      {label:'T', data:[], fill:false},
      {label:'H', data:[], fill:false},
      {label:'N', data:[], fill:false},
      {label:'pH',data:[], fill:false}
    ]},
    options:{ responsive:true }
  });

  async function refreshCoord() {
    // Sensores
    const data = await (await fetch('/datos')).json();
    const last5 = data.slice(-5);
    document.getElementById('sensorBody').innerHTML = '';
    liveChart.data.labels = [];
    liveChart.data.datasets.forEach(ds=>ds.data=[]);
    last5.reverse().forEach(s=>{
      document.getElementById('sensorBody').insertAdjacentHTML('beforeend', `
        <tr>
          <td>${s.temperatue.toFixed(1)}</td><td>${s.humidity.toFixed(1)}</td>
          <td>${s.nivel.toFixed(1)}</td><td>${s.ph.toFixed(2)}</td>
          <td>${s.FechaHora}</td>
        </tr>`);
      liveChart.data.labels.push(new Date(s.FechaHora).toLocaleTimeString());
      liveChart.data.datasets[0].data.push(s.temperatue);
      liveChart.data.datasets[1].data.push(s.humidity);
      liveChart.data.datasets[2].data.push(s.nivel);
      liveChart.data.datasets[3].data.push(s.ph);
    });
    liveChart.update();

    // Alertas
    const [tAlerts, nAlerts] = await Promise.all([
      fetch('/datos1').then(r=>r.json()),
      fetch('/datos2').then(r=>r.json())
    ]);
    const list = document.getElementById('alertList');
    list.innerHTML = '';
    [...tAlerts.slice(-3).reverse(), ...nAlerts.slice(-3).reverse()]
      .forEach(a=>{
        const text = a.alertaTempHum || a.alertaNivel;
        list.insertAdjacentHTML('beforeend', `
          <li class="list-group-item d-flex justify-content-between">
            <span>${text}</span>
            <small class="text-muted">${a.FechaHora}</small>
          </li>`);
      });
  }

  refreshCoord();
  setInterval(refreshCoord, 5000);
  </script>
}
